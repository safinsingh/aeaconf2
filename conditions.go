package aeaconf2

import (
	"fmt"
	"reflect"
)

type Condition interface {
	// return error for debugging purposes
	Score() (bool, error)
	// for autogenerated check messaged
	DefaultString() string
}

type BaseCondition struct {
	Hint string
}

type AndExpr struct {
	BaseCondition
	Lhs Condition
	Rhs Condition
}

func (a *AndExpr) Score() (bool, error) {
	lhsResult, lhsErr := a.Lhs.Score()
	rhsResult, rhsErr := a.Rhs.Score()

	result := lhsResult && rhsResult

	var err error
	if lhsErr != nil && rhsErr != nil {
		err = fmt.Errorf("LHS error: %v, RHS error: %v", lhsErr, rhsErr)
	} else if lhsErr != nil {
		err = fmt.Errorf("LHS error: %v", lhsErr)
	} else if rhsErr != nil {
		err = fmt.Errorf("RHS error: %v", rhsErr)
	}

	return result, err
}

func (a *AndExpr) DefaultString() string {
	return fmt.Sprintf("(%s AND %s)", a.Lhs.DefaultString(), a.Rhs.DefaultString())
}

type OrExpr struct {
	BaseCondition
	Lhs Condition
	Rhs Condition
}

func (o *OrExpr) Score() (bool, error) {
	lhsResult, lhsErr := o.Lhs.Score()
	rhsResult, rhsErr := o.Rhs.Score()

	result := lhsResult || rhsResult

	var err error
	if lhsErr != nil && rhsErr != nil {
		err = fmt.Errorf("LHS error: %v, RHS error: %v", lhsErr, rhsErr)
	} else if lhsErr != nil {
		err = fmt.Errorf("LHS error: %v", lhsErr)
	} else if rhsErr != nil {
		err = fmt.Errorf("RHS error: %v", rhsErr)
	}

	return result, err
}

func (o *OrExpr) DefaultString() string {
	return fmt.Sprintf("(%s OR %s)", o.Lhs.DefaultString(), o.Rhs.DefaultString())
}

type NotFunc struct {
	BaseCondition
	// Func is always a function call
	Func Condition
}

func (n *NotFunc) Score() (bool, error) {
	funResult, funErr := n.Func.Score()
	return !funResult, funErr
}

func (n *NotFunc) DefaultString() string {
	return fmt.Sprintf("NOT (%s)", n.Func.DefaultString())
}

// I still hate go
func SetConditionHint(cond Condition, newHint string) {
	val := reflect.ValueOf(cond)
	if val.Kind() == reflect.Ptr && !val.IsNil() {
		val = val.Elem()
	}

	baseCond := val.FieldByName("BaseCondition")
	if baseCond.IsValid() && baseCond.CanSet() {
		hint := baseCond.FieldByName("Hint")
		if hint.IsValid() && hint.CanSet() {
			hint.SetString(newHint)
			return
		}
	}
	panic("ICE: could not set condition hint")
}
